#!/bin/bash
# Script that utilises fzf to interact with VMs

# Commands that allow only single selection
no_multi=(
    "ssh"
    "s"
    "ssh-copy-id"
    "sci"
)

# Commands that are restricted to running VMs
restrict_running=(
    "ssh"
    "s"
    "ssh-copy-id"
    "sci"
)

# Converts $sel into seperate arrays
# ids: the VMs id
# machines: the VMs name
# state: the VMs state, note that for multi word states like 'shut off' it is just 'shut'
# num_vms: the number of VMs selected, for iterating over the arrays
function handle-sel {
    IFS=$'\n'
    ids=()
    machines=()
    states=()
    num_vms=0
    for line in $sel; do
        IFS=' ' read -rd '' -a linearr <<<"$line"
        ids+=("${linearr[0]}")
        machines+=("${linearr[1]}")
        states+=("${linearr[2]}")
        ((num_vms=num_vms+1))
    done
    unset IFS
}

# List vms and make the user select which they want
# full list is stored in $sel
# but it also invokes handle-sel, see above what vars this stores
function vm-list {
    if [[ "${restrict_running[*]}" =~ "$1" ]]; then
        vmlist=$(virsh list | head -n -1)
    else
        vmlist=$(virsh list --all | head -n -1)
    fi
    if [[ "$1" == "list" || "$1" == "l" ]]; then
        printf '%s\n' "$vmlist"
        exit 0;
    fi
    sel=$(fzf --header-lines=2 --no-sort `# Invoke fzf` \
    $(if [[ "${no_multi[*]}" =~ "$1" ]]; then echo --multi=1; fi) `# Check if command allows multi-select` \
    <<< "$vmlist" `# Input vmlist to fzf` \
    | tr -s ' ' `# Trim all excess space chars` \
    | cut -c 2-) `# Cut beginning chars`

    # Check if no entry was selected
    if [ -z "$sel" ]; then
        exit
    fi

    handle-sel
}

function vm-l {
    eval "vm-list $@"
}

# Toggle the state of VMs
function vm-toggle {
    for i in "${!ids[@]}"; do
        # a newline is after running that's why we catch it with *
        if [[ ${states[i]} == "running"* ]]; then
            echo Shutting down ${machines[i]} now...
            virsh shutdown ${machines[i]}
        elif [[ ${states[i]} == "shut" ]]; then
            echo Starting ${machines[i]} now...
            virsh start ${machines[i]}
        fi
    done
}

function vm-t {
    eval "vm-toggle $@"
}

# SSH into a VM
function vm-ssh {
    ssh root@$((virsh domifaddr ${machines[0]} \
    | grep -oP '192.168.*.+?(?=\/)' \
    || grep -oP '10.*.+?(?=\/)' \
    || grep -oP '172.*.+?(?=\/)') \
    | head -n 1)
}

function vm-s {
    eval "vm-ssh $@"
}

# Copy ssh id to vm, then ssh into said vm
function vm-ssh-copy-id {
    ssh-copy-id root@$(virsh domifaddr ${machines[0]} \
    | grep -oP '192.168.*.+?(?=\/)' \
    || grep -oP '10.*.+?(?=\/)' \
    || grep -oP '172.*.+?(?=\/)')

    eval "vm-ssh $@"
}

function vm-sci {
    eval "vm-ssh-copy-id $@"
}

# Print help
function vm-help {
    echo "Usage: vm [command]"
    echo "Control libvirt VMs interactively via fzf."
    echo ""
    echo " vm l, list           - List all VMs (basically 'virsh list --all')"
    echo " vm t, toggle         - Toggle state of selected VMs"
    echo " vm s, ssh            - SSH into selected VM, note that it only lists running VMs"
    echo " vm sci, ssh-copy-id  - Copy ssh id to vm, then ssh into said vm"
}

subcommand="$1"
if [[ -z "$subcommand" || "$subcommand" == "help" ]]; then
    vm-help
else
    if $(type vm-$subcommand > /dev/null 2> /dev/null); then
        shift
        # First create the list of VMs
        eval "vm-list $subcommand"
        # Then execute the subcommand
        eval "vm-$subcommand $@"
    else
        vm-help
    fi
fi
